'''
---------------------------------------------------
Project:        Braelo
Date:           Aug 14, 2024
Author:         Hamid
---------------------------------------------------

Description:
Django settings for Braelo project.

Generated by 'django-admin startproject' using Django 4.2.15.
---------------------------------------------------
'''

import os
import base64
import binascii
import json
from pathlib import Path
from dotenv import load_dotenv
from firebase_admin import initialize_app, credentials
from mongoengine import connect


# Load environment variables
load_dotenv()

# current_dir = os.getcwd()
# firebase_credentials = os.path.join(current_dir, 'config', 'credentials.json')

# # Initialize Firebase
# if not os.path.exists(firebase_credentials):
#     raise FileNotFoundError(
#         f"Firebase credentials file not found at: {firebase_credentials}"
#     )

# try:
#     cred = credentials.Certificate(firebase_credentials)
#     initialize_app(cred)
#     print("Firebase initialized successfully.")
# except Exception as e:
#     print(f"An error occurred while initializing Firebase: {e}")

# Get Base64 string from environment variable


try:
    encoded_json="ew0KICAidHlwZSI6ICJzZXJ2aWNlX2FjY291bnQiLA0KICAicHJvamVjdF9pZCI6ICJicmFlbG8tN2E5M2YiLA0KICAicHJpdmF0ZV9rZXlfaWQiOiAiYjY4OGM4MWE4NWI3MjM5YTg2MzA1MmE1MTQ5MTJiOTZlYWFlOGFjNyIsDQogICJwcml2YXRlX2tleSI6ICItLS0tLUJFR0lOIFBSSVZBVEUgS0VZLS0tLS1cbk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRQ2ZORm12aVc3aFFna2xcbmR1R2xwYmhIeFpIODArOERsU0JGSkw0L25rNG1DelF1Y21PNzMxSUtabFY0dXYxM2RuNzNkYk5GR2VLNVRiaTNcbnZKT2d5QTNSZ0plV3hiL2pnTUJEanRsR2RLcVdpbWtyOE4zVUM4M0QzMjVqTnJHWVFtRnJRNnE2THd6aXdEZ1NcbjU5S2ROOWt5WCtqS0hpbHZqeFJGMTlLV3BxdjgzMEZiMVhiZ1g5WXd4MnhsQlB4eWo1aDJFZHBNSHhCMCs5L0pcbldMV2dXKzArK0tFemU3bkI0eG9VaHBWWWhQM2hnaU5CVThzdnVCRHczSTZwbTBGNnNkaFgzL2hkWTEyL0RFRGxcbmRTdC9pR0I4U21BS1N4alNwREI4US9DbkhML1RZV2NXa0QweXZwNmZZcjNuekQ2cW4rWUpBWHRwYnhwSVpQNXlcbmJNekoyTkM3QWdNQkFBRUNnZ0VBQTVFOE96czBvVmFGOXZGeGYvRTFMbUtHY1doY1VETzh1OS9sWlc2S0tMOFNcbmhjSHBhekhIV0ZWUHIvdGNwNXNmb0RMaWQvZHJCYVR3c1NsSUU0KzRBNHhDbVUzSURYUjZtbWp1aEc0anptaStcbmo0My9vbnM3T3ByY2tkdU5ZakNHbDAwMlc2S25Rc04wM2pPVW5CSSt5eXFzQUM5cDFVYWErUytyVjlYWFA3ekZcbjNBc0V0b1lsazFlVExMTlFwS0QyVXg2VE1kZ0ZhTnhqVndaUDdJbDZ3N25nTlBwQnZxWk1qRHJXRHAyOEJRd1FcbngvaTNjRVhGOU84Q1NPWW5XV2YwQmExUDJiZ0ExRENGZWx4SElNK3JvQm15ZjBlb1FhdHVOVUdGdzJEYTNpVDlcbmE5RkpmV1BWU094ckFtZDNDQkNMZHNJTEtmMk9hcHAzcnBzT2p0L1Y3UUtCZ1FDOGRyKzdLdEtWZ1hDTmFyQlJcbnNLcjl2NGFnTitNa1dEK2FCMUVEWG1yREdPbnk3NnJKYmJ3b3BUeklOZ2FLM2w3WVl5U2N6cWZEbmZyM0NDU1VcblJSL2xKMWc1U0UxdjkzaEg5bS9yeHNsblFxR1YvdUJnMWZyWTZGL3piSExHSXJZeE0vQmZEMVV0eGZhVjZMSDVcbllUZ00zcUU0OWROckI2OGc2QlFvQmdMZzFRS0JnUURZUVdtZ21BY1hIQmZ2bEFDVXpVc0hwMDdFZ2w4WG9LWkZcbnI1eXJESjFaQWNYU3orVUk3TnI5TW1HTUNCNmg4Y2NFRlo3dzErc0xDeEJ5eHNmSVpOanA3WEZ0ZmVITDdTdjBcbjhkb3hKbGlSTVErZ0gzQUhncS9RUkZ0bWMvOUVDbmpuMGZDZGJwUHlQaVlBUitPTEF6bTcwMktnYUgvN2xKVUtcbnhBSE15UDh6VHdLQmdRQ2pyQzJQQ3YyZndhNVI0cG9HRi93b0t6RnI2NTFrYncrdFlUVkdTN1ZFZ2xxTEZRR3BcbnRaZDNaU21JWndML2oyZW5YVkxxcTc2ZThKQ0lBWlppL2pWWStmWndxUTQzY3lBT3YwTXI3SlAxRGJUdlkwN1NcblNvTno1VHVQV0Z2RkgxaERHdXhpWWhxRGlpMUF1N24wN2kyVFg3VjhsbUZwemw2Vm9YZi8ybGlka1FLQmdRQzRcblQ0Zm5CNnVEVnI1UHdxUjhMancwV2JRWVo4VUVMamVJVFJRSjlNWm1oY3hFMEVzMFFDcWtnYndCelNuT2ZISlNcbldOc09DZmlaZ09TVDdqZDM0L3U3NUZNNExvR3pmSUJxVTNiVFRRdFBNN0ZObDMyejZQNVBVdk5UYnFteEkvdklcbkdIWXF0NFFBZ2xlQkJjUTVScForTHJ0d1c2QTRtM29yb3NLbDl1a0tvUUtCZ0E0eEt3dWZnbWs1clpjVGoyL21cbmRmNXdoK0IyMVRFdjFTNU41SitWQ3BJQkg0Qm5UMVFPcDhRMmZIRFdMVk9JUXlsVU9WUnBua2pSN3ZCdGIrOGlcbjlSQVUvdUdQd3lVYS9uUldQVXNWakFWMGp3VFdNdnJQRDhqa3hkbXFtWnR2azY3M3grWkNLTklsR282RTN1UGRcbnZVOWp4N3dXTWdmR1o2cVkwMk5KNlYvL1xuLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLVxuIiwNCiAgImNsaWVudF9lbWFpbCI6ICJmaXJlYmFzZS1hZG1pbnNkay1kcTBvZkBicmFlbG8tN2E5M2YuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLA0KICAiY2xpZW50X2lkIjogIjEwMDA5NjgzMTE5MDI2MjI3OTE0MCIsDQogICJhdXRoX3VyaSI6ICJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvYXV0aCIsDQogICJ0b2tlbl91cmkiOiAiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW4iLA0KICAiYXV0aF9wcm92aWRlcl94NTA5X2NlcnRfdXJsIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS9jZXJ0cyIsDQogICJjbGllbnRfeDUwOV9jZXJ0X3VybCI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9yb2JvdC92MS9tZXRhZGF0YS94NTA5L2ZpcmViYXNlLWFkbWluc2RrLWRxMG9mJTQwYnJhZWxvLTdhOTNmLmlhbS5nc2VydmljZWFjY291bnQuY29tIiwNCiAgInVuaXZlcnNlX2RvbWFpbiI6ICJnb29nbGVhcGlzLmNvbSINCn0NCg=="

    # üîì Decode Base64 string
    firebase_credentials_json = base64.b64decode(encoded_json).decode("utf-8")
    firebase_credentials = json.loads(firebase_credentials_json)

    # üî• Initialize Firebase
    cred = credentials.Certificate(firebase_credentials)
    initialize_app(cred)

    print("üî• Firebase initialized successfully!")

except json.JSONDecodeError:
    print("‚ö†Ô∏è Firebase initialization failed: Invalid JSON format in credentials.")

except binascii.Error:
    print("‚ö†Ô∏è Firebase initialization failed: Invalid Base64 encoding.")

except Exception as e:
    print(f"‚ö†Ô∏è Firebase initialization failed: {e}")


GOOGLE_OAUTH_CLIENT_ID = (
    "221272028067-cnm21hi90qmfp0jggj62148fetbv8qbn.apps.googleusercontent.com"
)


# We need these lines below to allow the Google sign in popup to work.
SECURE_REFERRER_POLICY = 'no-referrer-when-downgrade'
SECURE_CROSS_ORIGIN_OPENER_POLICY = "same-origin-allow-popups"


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = (
    'django-insecure-d(rn*9qo8w(8^+06+f481^h-ncd8^5*2b%&f0dp&_yc4bgsdo8'
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '192.168.18.4',
    'localhost',
    '127.0.0.1',
    'braelo-fug5gcb6c0hpbpdn.canadacentral-01.azurewebsites.net',
]
CORS_ORIGIN_ALLOW_ALL = True
CSRF_TRUSTED_ORIGINS = [
    'https://braelo-fug5gcb6c0hpbpdn.canadacentral-01.azurewebsites.net',
    'http://localhost',
    'http://127.0.0.1',
    'http://192.168.18.4',
]

# Email backend

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# for testing
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# SMTP server settings
EMAIL_HOST = 'smtp.gmail.com'  # Gmail SMTP server (adjust for other providers)
EMAIL_PORT = 587  # Typically 587 for TLS
EMAIL_USE_TLS = True  # Use TLS (Transport Layer Security) for security

# Your email address and password
EMAIL_HOST_USER = 'braelo.fl@gmail.com'
EMAIL_HOST_PASSWORD = 'kgpv txaa anwb bvke'
DEFAULT_FROM_EMAIL = 'braelo.fl@gmail.com'

# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'users',
    'chats',
    'listings',
    'notifications',
    'fcm_django',
]

AUTH_USER_MODEL = 'users.User'

# JWT settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'PAGE_SIZE': 15,
}

# Set up JWT settings
from datetime import timedelta

SIMPLE_JWT = {
    'BLACKLIST_AFTER_ROTATION': True,
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=2880),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),
    'SLIDING_TOKEN_LIFETIME': timedelta(days=30),
    'SLIDING_TOKEN_REFRESH_LIFETIME_LATE_USER': timedelta(days=1),
    'SLIDING_TOKEN_LIFETIME_LATE_USER': timedelta(days=30),
}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'applications.custom_authentication.middleware.JWTAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
REDIS_URL = os.getenv(
    "REDIS_URL",
    "redis://:Ds5XpZYB6BUKreYFgRdrFKXYG4UGsojS@redis-15589.c53.west-us.azure.redns.redis-cloud.com:15589/0",
)
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_URL)],  # Replace with your Redis host and port
        },
    },
}

# S3 configurations
AZURE_ACCOUNT_NAME = 'braelos3'
AZURE_ACCOUNT_KEY = '5PkRWE5PK49PotcquKuVgZ6jLN261i8VNuqqdpTKJJekYcr2EWwrrlRyqV/s7a+mLOrV/YKBZDOX+AStNDj6pQ=='
AZURE_CONTAINER_NAME = 'braelo'
AZURE_CUSTOM_DOMAIN = 'https://braelos3.blob.core.windows.net/braelo'

# Twilio Setting
TWILIO_ACCOUNT_SID = 'ACd73fc3ad8cee9529a484342740e6161b'
TWILIO_AUTH_TOKEN = 'ef5f648b70cf84215b51e54d44037013 '
TWILIO_VERIFY_SERVICE_SID = 'VAcd6f5d07809c6f1e0d61f76bb64ce123'

# Firebase notifications
FCM_DJANGO_SETTINGS = {
    "FCM_SERVER_KEY": "your-fcm-server-key-here",
}


ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'config.wsgi.application'

ASGI_APPLICATION = 'config.asgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
username = 'braelofl'
password = '83PsPZiwdBsgEJNT'
db_name = 'braelo'
connection_string = f"mongodb+srv://{username}:{password}@braelo.karg4.mongodb.net/{db_name}?retryWrites=true&w=majority"

connect(
    db='braelo',  # Name of your MongoDB database
    host=connection_string,
    port=27017,  # Default MongoDB port
    username=username,  # MongoDB username if authentication is enabled
    password=password,  # MongoDB password
    authentication_source='admin',  # Authentication source, usually 'admin'
    # authentication_mechanism='SCRAM-SHA-1',  # Authentication mechanism
)

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
